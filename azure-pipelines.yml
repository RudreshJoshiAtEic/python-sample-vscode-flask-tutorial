# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
#- main
   none

pool:
  vmImage: ubuntu-latest

strategy:
  matrix:
    #Python38:
    #  python.version: '3.8'
    #Python39:
    #  python.version: '3.9'
    #Python310:
    #  python.version: '3.10'
    Python311:
      python.version: '3.11'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- script: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
  displayName: 'Install dependencies'

- script: |
    pip install pytest pytest-azurepipelines
    pytest
  displayName: 'pytest'

- script: |
    cd $(Build.Repository.LocalPath)
    #python -m pytest $(Build.Repository.LocalPath)/<unit_tests_path>/*.py --junitxml=test-unit.xml
    python -m pytest $(Build.Repository.LocalPath)/*.py --junitxml=test-unit.xml

  displayName: 'Run Unit Tests'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: 'test-unit.xml'

- script: |
    pip install pytest pytest-azurepipelines
    pip install pytest-cov
    pytest --doctest-modules --junitxml=junit/test-results.xml --cov=. --cov-report=xml
  displayName: 'pytest'
  
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/test-*.xml'

- pwsh: |
   # Define organization base url, PAT and API version variables 
    $orgUrl = "https://dev.azure.com/v-rujoshi"
    $projUrl = "v-rujoshi"
    $apiVersion = "api-version=5.0"
    #$pat = "3QlAYOMaju1nrrrzKcgwteQ0aIh5YN3ZQ07aCxpP605zapuzGMYeJQQJ99ALACAAAAAAArohAAASAZDOY7OD"

    $pat = $env:SYSTEM_ACCESSTOKEN
    # Create header with PAT
    $token = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes(":$($pat)"))
    $header = @{authorization = "Basic $token"}

    echo "displaying token . . . . . . . "
    echo $token 

    echo "displaying header . . . . . . . "
    echo $header 
    
    # Get all the test plans for the project
    $getAllTestPlans = "$orgUrl/$projUrl/_apis/test/plans?$apiVersion"
    $testPlans = Invoke-RestMethod  -Uri $getAllTestPlans -Method Get -ContentType "application/json" -Headers $header
    echo " test plans id and name -----------"
    echo $testPlans.value.id
    echo $testPlans.value.name 
    echo " test plans all values -----------"
    
    echo $testPlans.value
    

    # Get all test suites for a test plan
    $getAllTestSuites = "$orgUrl/$projUrl/_apis/test/plans/1/suites?$apiVersion"
    $testSuites = Invoke-RestMethod  -Uri $getAllTestSuites -Method Get -ContentType "application/json" -Headers $header
    echo " test suites -----------"
    echo $testSuites.value

    # Get all test points for a test suite
    $getAllTestPoints = "$orgUrl/$projUrl/_apis/test/plans/1/suites/3/points?$apiVersion"
    $testPoints= Invoke-RestMethod  -Uri $getAllTestPoints -Method Get -ContentType "application/json" -Headers $header
    $getTestPointsId = $testPoints.value.id -join ','  
    echo "Are there any test points ? "
    $test = "[$getTestPointsId]" 
    echo $test

    # Get all test points for a test suite
    $getAllTestPoints = "$orgUrl/$projUrl/_apis/test/plans/1/suites/3/points?$apiVersion"
    $testPoints= Invoke-RestMethod  -Uri $getAllTestPoints -Method Get -ContentType "application/json" -Headers $header
    $getTestPointsId = $testPoints.value.id -join ','  

    $test = "[$getTestPointsId]" 
    echo $test
    #$uri4 = "https://dev.azure.com/v-rujoshi/v-rujoshi/_apis/test/plans/1"
    #$testResponse4 = Invoke-RestMethod -Uri $uri4 -Method Get -ContentType "application/json" -Headers $header -ConnectionTimeoutSeconds 120 -OperationTimeoutSeconds 120
    #echo " 4 4 4 4 4 testResponse4 value" 

    #echo $testResponse4.value
    
    #echo "testResponse4 RAW" 

    #echo "---------------------"
    
    #Write-Host  $testResponse4

  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)

#- task: VSTest@2
#  inputs:
#    testSelector: testPlan
#    testPlan: 1
#    testSuite: $(testSuites)
#    testConfiguration: 2
#    uiTests: true
#    testRunTitle: 'Automated UI testing'

    